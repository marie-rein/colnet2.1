@page "/verifierCourriel"
@using ColNet2._0.Services
@using ColNet2._0.Data
@using ColNet2._0.Models
@using System.Net;
@inject leService monService
@inject IJSRuntime JS
@inject NavigationManager navManager


<section class="vh-100 gradient-custom">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-12 col-md-8 col-lg-6 col-xl-5">
                <div class="card bg-light text-black" style="border-radius: 1rem;border-color:black;">
                    <div class="card-body p-5 text-center">

                        <div class="mb-md-5 mt-md-4 pb-5">

                            <h2 class="fw-bold mb-2 text-capitalizes">Valider votre adresse courriel</h2>
                            <EditForm Model="@eleve" OnValidSubmit="@SendResetPasswordEmail">
                                <DataAnnotationsValidator/>
                                <div class="form-outline form-black mb-3">
                                    <label class="form-label" for="typeEmailX">Email</label>
                                    <InputText id="typeEmailX" class="form-control form-control-lg" placeholder="Courriel" @bind-Value="eleve.CourrielEleve" />
                                    <ValidationMessage For="@(() => eleve.CourrielEleve)" />

                                </div>
                                <div>
                                    <span style="color:red">@message</span>
                                </div>
                                <button class="btn btn-outline-dark btn-lg px-5" type="submit" @onclick="SendResetPasswordEmail">Envoyer</button>
                            </EditForm>
                            
                            
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {

    protected string email { get; set; }
    private string message = string.Empty;
    protected TblEleve eleve { get; set; } = new TblEleve();

    protected override Task OnInitializedAsync()
    {
        //tblEleve = new List<TblEleve>();

        return base.OnInitializedAsync();
    }

    public async void ValiderEmail()
    {
        if (!(string.IsNullOrWhiteSpace(eleve.CourrielEleve)))
        {
            email = await monService.VerifieEmail(eleve.CourrielEleve);

            if (email == null)
            {
                message = "Le courriel n'existe pas";
            }
            else
            {
                navManager.NavigateTo("/resetPassword");
            }
        }


    }
    public async Task SendResetPasswordEmail()
    {

        if (!(string.IsNullOrWhiteSpace(eleve.CourrielEleve)))
        {
            email = await monService.VerifieEmail(eleve.CourrielEleve);
            if (email != null)
            {
                var resetLink = $"{navManager.BaseUri}resetPassword/";


                var success = await monService.SendPasswordResetLinkAsync(email,resetLink);

                if (success)
                {
                    this.eleve.CourrielEleve = null; 
                    message = "un email a été envoyer à votre courriel. Veillez valider en cliquant sur le lien trouvé dans le mail";

                    await Task.Delay(15000);
                    navManager.NavigateTo("/login", true);
                }
                else
                {
                    message = "Une erreur est survenue, le courriel n'a pas été envoyé";
                }
            }
            else
            {
                message = "Le courriel n'existe pas";
            }
        }
       
    }
   

}
